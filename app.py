import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
from scipy import stats
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard - An√°lise IN Junior",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

class INJuniorSurveyAnalyzer:
    """Classe para an√°lise dos dados da pesquisa de satisfa√ß√£o da IN Junior"""
    
    def __init__(self, df):
        """
        Inicializa o analisador com um DataFrame
        
        Args:
            df (DataFrame): DataFrame com os dados da pesquisa
        """
        self.df = df.copy()
        self.df_processed = None
        self._clean_and_process_data()
        
    def _clean_and_process_data(self):
        """Limpa e processa os dados iniciais"""
        self.df_processed = self.df.copy()
        
        # Remove linhas completamente vazias
        self.df_processed = self.df_processed.dropna(how='all')
        
        # Converte colunas num√©ricas (escalas de 1-5, 1-5, etc.)
        numeric_columns = [
            'O qu√£o organizada voc√™ considera a DE?',
            'O qu√£o acess√≠vel √© o seu/sua diretor(a)?',
            'Qu√£o bem os integrantes de sua diretoria se comunicam entre si?',
            'Quanto voc√™ se relaciona com membros de outras diretorias?',
            'O qu√£o satisfat√≥ria √© a delega√ß√£o de tarefas na sua diretoria?',
            'O qu√£o voc√™ se sente preparado para realizar as suas tarefas de diretoria?',
            'Qu√£o bem os integrantes da sua diretoria compartilham as responsabilidades pelas tarefas?',
            'Quantas horas por semana voc√™ gasta com tarefas de diretoria?',
            'O quanto voc√™ se sente preparado(a) para conceder feedback para os membros da sua equipe?',
            'O quanto voc√™ concede feedback para os membros da sua equipe?',
            'Com que frequ√™ncia seu/sua diretor(a) ouve seus assessores para tomar decis√µes?',
            'Com que frequ√™ncia voc√™ recebe feedback de seu/sua diretor(a)?',
            'De forma geral, o quanto voc√™ est√° satisfeito(a) com seu/sua gerente?',
            'Quantos projetos voc√™ est√° realizando na IN Junior atualmente?',
            'Quantas horas semanalmente voc√™ gasta com tarefas de projeto?',
            'O qu√£o satisfeito(a) voc√™ est√° com a atua√ß√£o da sua equipe no(s) projeto(s) que voc√™ participa?',
            'O qu√£o satisfeito(a) voc√™ est√° com o seu desempenho nas tarefas de projeto?',
            'O quanto voc√™ acha os plant√µes relevantes para a realiza√ß√£o de um projeto?',
            'Qu√£o organizada √© a nossa salinha?',
            'O quanto voc√™ acha importante participar dos eventos da empresa? (RG\'s, reuni√µes, p{IN}zza...)',
            'O quanto voc√™ se sente ouvido(a) dentro da empresa?',
            'O qu√£o satisfeito(a) voc√™ est√° com a IN Junior?',
            'Qual a carga hor√°ria di√°ria do seu est√°gio/trabalho?'
        ]
        
        # Converte para num√©rico, colocando NaN para valores inv√°lidos
        for col in numeric_columns:
            if col in self.df_processed.columns:
                self.df_processed[col] = pd.to_numeric(self.df_processed[col], errors='coerce')
    
    def calculate_satisfaction_metrics(self):
        """Calcula m√©tricas de satisfa√ß√£o geral"""
        metrics = {}
        
        satisfaction_col = 'O qu√£o satisfeito(a) voc√™ est√° com a IN Junior?'
        if satisfaction_col in self.df_processed.columns:
            valid_responses = self.df_processed[satisfaction_col].dropna()
            if len(valid_responses) > 0:
                metrics['satisfacao_geral'] = {
                    'media': round(valid_responses.mean(), 2),
                    'mediana': round(valid_responses.median(), 2),
                    'desvio_padrao': round(valid_responses.std(), 2),
                    'n_respostas': len(valid_responses),
                    'percentil_75': round(valid_responses.quantile(0.75), 2),
                    'percentil_25': round(valid_responses.quantile(0.25), 2),
                    'data': valid_responses
                }
        
        return metrics
    
    def analyze_organizational_structure(self):
        """Analisa m√©tricas relacionadas √† estrutura organizacional"""
        metrics = {}
        
        org_metrics = {
            'organizacao_de': 'O qu√£o organizada voc√™ considera a DE?',
            'acessibilidade_diretor': 'O qu√£o acess√≠vel √© o seu/sua diretor(a)?',
            'comunicacao_interna': 'Qu√£o bem os integrantes de sua diretoria se comunicam entre si?'
        }
        
        for key, col in org_metrics.items():
            if col in self.df_processed.columns:
                valid_responses = self.df_processed[col].dropna()
                if len(valid_responses) > 0:
                    metrics[key] = {
                        'media': round(valid_responses.mean(), 2),
                        'desvio_padrao': round(valid_responses.std(), 2),
                        'n_respostas': len(valid_responses),
                        'data': valid_responses
                    }
        
        return metrics
    
    def analyze_workload_distribution(self):
        """Analisa distribui√ß√£o de carga de trabalho"""
        metrics = {}
        
        workload_metrics = {
            'horas_semanais_diretoria': 'Quantas horas por semana voc√™ gasta com tarefas de diretoria?',
            'horas_semanais_projeto': 'Quantas horas semanalmente voc√™ gasta com tarefas de projeto?',
            'projetos_simultaneos': 'Quantos projetos voc√™ est√° realizando na IN Junior atualmente?'
        }
        
        for key, col in workload_metrics.items():
            if col in self.df_processed.columns:
                valid_responses = self.df_processed[col].dropna()
                if len(valid_responses) > 0:
                    metrics[key] = {
                        'media': round(valid_responses.mean(), 2),
                        'mediana': round(valid_responses.median(), 2),
                        'desvio_padrao': round(valid_responses.std(), 2),
                        'maximo': valid_responses.max(),
                        'minimo': valid_responses.min(),
                        'n_respostas': len(valid_responses),
                        'data': valid_responses
                    }
        
        return metrics
    
    def analyze_feedback_culture(self):
        """Analisa a cultura de feedback na empresa"""
        metrics = {}
        
        feedback_metrics = {
            'preparacao_feedback': 'O quanto voc√™ se sente preparado(a) para conceder feedback para os membros da sua equipe?',
            'frequencia_feedback_dado': 'O quanto voc√™ concede feedback para os membros da sua equipe?',
            'frequencia_feedback_recebido': 'Com que frequ√™ncia voc√™ recebe feedback de seu/sua diretor(a)?'
        }
        
        for key, col in feedback_metrics.items():
            if col in self.df_processed.columns:
                valid_responses = self.df_processed[col].dropna()
                if len(valid_responses) > 0:
                    metrics[key] = {
                        'media': round(valid_responses.mean(), 2),
                        'desvio_padrao': round(valid_responses.std(), 2),
                        'n_respostas': len(valid_responses),
                        'data': valid_responses
                    }
        
        return metrics
    
    def analyze_engagement_metrics(self):
        """Analisa m√©tricas de engajamento"""
        metrics = {}
        
        engagement_metrics = {
            'importancia_eventos': 'O quanto voc√™ acha importante participar dos eventos da empresa? (RG\'s, reuni√µes, p{IN}zza...)',
            'sentimento_ouvido': 'O quanto voc√™ se sente ouvido(a) dentro da empresa?'
        }
        
        for key, col in engagement_metrics.items():
            if col in self.df_processed.columns:
                valid_responses = self.df_processed[col].dropna()
                if len(valid_responses) > 0:
                    metrics[key] = {
                        'media': round(valid_responses.mean(), 2),
                        'desvio_padrao': round(valid_responses.std(), 2),
                        'n_respostas': len(valid_responses),
                        'data': valid_responses
                    }
        
        return metrics
    
    def generate_summary_report(self):
        """Gera relat√≥rio resumo com todas as m√©tricas"""
        report = {
            'info_geral': {
                'total_respostas': len(self.df_processed),
                'colunas_analisadas': len(self.df_processed.columns)
            },
            'satisfacao': self.calculate_satisfaction_metrics(),
            'estrutura_organizacional': self.analyze_organizational_structure(),
            'carga_trabalho': self.analyze_workload_distribution(),
            'cultura_feedback': self.analyze_feedback_culture(),
            'engajamento': self.analyze_engagement_metrics()
        }
        
        return report

def create_satisfaction_charts(analyzer):
    """Cria gr√°ficos de satisfa√ß√£o usando Plotly"""
    satisfaction_data = analyzer.calculate_satisfaction_metrics()
    
    if 'satisfacao_geral' in satisfaction_data:
        data = satisfaction_data['satisfacao_geral']['data']
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Histograma
            fig_hist = px.histogram(
                x=data, 
                nbins=5,
                title="Distribui√ß√£o da Satisfa√ß√£o Geral",
                labels={'x': 'N√≠vel de Satisfa√ß√£o', 'count': 'Frequ√™ncia'},
                color_discrete_sequence=['#1f77b4']
            )
            fig_hist.update_layout(showlegend=False)
            st.plotly_chart(fig_hist, use_container_width=True)
        
        with col2:
            # Box plot
            fig_box = px.box(
                y=data,
                title="Box Plot - Satisfa√ß√£o Geral",
                labels={'y': 'N√≠vel de Satisfa√ß√£o'}
            )
            fig_box.update_traces(marker_color='#ff7f0e')
            st.plotly_chart(fig_box, use_container_width=True)

def create_workload_charts(analyzer):
    """Cria gr√°ficos de carga de trabalho usando Plotly"""
    workload_data = analyzer.analyze_workload_distribution()
    
    if workload_data:
        col1, col2 = st.columns(2)
        
        # Histogramas de horas
        if 'horas_semanais_diretoria' in workload_data:
            with col1:
                data = workload_data['horas_semanais_diretoria']['data']
                fig_dir = px.histogram(
                    x=data,
                    title="Distribui√ß√£o - Horas Diretoria/Semana",
                    labels={'x': 'Horas', 'count': 'Frequ√™ncia'},
                    color_discrete_sequence=['#2ca02c']
                )
                st.plotly_chart(fig_dir, use_container_width=True)
        
        if 'horas_semanais_projeto' in workload_data:
            with col2:
                data = workload_data['horas_semanais_projeto']['data']
                fig_proj = px.histogram(
                    x=data,
                    title="Distribui√ß√£o - Horas Projeto/Semana",
                    labels={'x': 'Horas', 'count': 'Frequ√™ncia'},
                    color_discrete_sequence=['#d62728']
                )
                st.plotly_chart(fig_proj, use_container_width=True)
        
        # Box plot comparativo
        if 'horas_semanais_diretoria' in workload_data and 'horas_semanais_projeto' in workload_data:
            dir_data = workload_data['horas_semanais_diretoria']['data']
            proj_data = workload_data['horas_semanais_projeto']['data']
            
            fig_compare = go.Figure()
            fig_compare.add_trace(go.Box(y=dir_data, name='Diretoria', marker_color='#2ca02c'))
            fig_compare.add_trace(go.Box(y=proj_data, name='Projeto', marker_color='#d62728'))
            fig_compare.update_layout(
                title="Compara√ß√£o de Carga de Trabalho",
                yaxis_title="Horas/Semana"
            )
            st.plotly_chart(fig_compare, use_container_width=True)

def create_organizational_charts(analyzer):
    """Cria gr√°ficos da estrutura organizacional"""
    org_data = analyzer.analyze_organizational_structure()
    
    if org_data:
        # Gr√°fico de barras com as m√©dias
        metrics_names = []
        metrics_values = []
        
        name_mapping = {
            'organizacao_de': 'Organiza√ß√£o DE',
            'acessibilidade_diretor': 'Acessibilidade Diretor',
            'comunicacao_interna': 'Comunica√ß√£o Interna'
        }
        
        for key, data in org_data.items():
            metrics_names.append(name_mapping.get(key, key))
            metrics_values.append(data['media'])
        
        if metrics_names:
            fig = px.bar(
                x=metrics_names,
                y=metrics_values,
                title="Avalia√ß√£o da Estrutura Organizacional (M√©dias)",
                labels={'x': 'Aspecto', 'y': 'M√©dia (1-5)'},
                color=metrics_values,
                color_continuous_scale='viridis'
            )
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

def create_feedback_charts(analyzer):
    """Cria gr√°ficos da cultura de feedback"""
    feedback_data = analyzer.analyze_feedback_culture()
    
    if feedback_data:
        metrics_names = []
        metrics_values = []
        
        name_mapping = {
            'preparacao_feedback': 'Prepara√ß√£o p/ Feedback',
            'frequencia_feedback_dado': 'Frequ√™ncia Feedback Dado',
            'frequencia_feedback_recebido': 'Frequ√™ncia Feedback Recebido'
        }
        
        for key, data in feedback_data.items():
            metrics_names.append(name_mapping.get(key, key))
            metrics_values.append(data['media'])
        
        if metrics_names:
            fig = px.bar(
                x=metrics_names,
                y=metrics_values,
                title="Cultura de Feedback (M√©dias)",
                labels={'x': 'Aspecto', 'y': 'M√©dia (1-5)'},
                color=metrics_values,
                color_continuous_scale='plasma'
            )
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)

def display_metrics_cards(report):
    """Exibe cards com m√©tricas principais"""
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìä Total de Respostas",
            value=report['info_geral']['total_respostas']
        )
    
    with col2:
        if 'satisfacao_geral' in report['satisfacao']:
            satisfaction = report['satisfacao']['satisfacao_geral']
            st.metric(
                label="üòä Satisfa√ß√£o M√©dia",
                value=f"{satisfaction['media']}/5",
            )
    
    with col3:
        if 'horas_semanais_diretoria' in report['carga_trabalho']:
            hours = report['carga_trabalho']['horas_semanais_diretoria']
            st.metric(
                label="‚è∞ Horas Diretoria/Semana",
                value=f"{hours['media']}h",
                delta=f"Max: {hours['maximo']}h"
            )
    
    with col4:
        if 'horas_semanais_projeto' in report['carga_trabalho']:
            hours = report['carga_trabalho']['horas_semanais_projeto']
            st.metric(
                label="üöÄ Horas Projeto/Semana",
                value=f"{hours['media']}h",
                delta=f"Max: {hours['maximo']}h"
            )

# Interface principal do Streamlit
def main():
    st.title("üìä Dashboard de An√°lise - IN Junior")
    st.markdown("---")
    
    # Sidebar para upload do arquivo
    st.sidebar.header("üìÅ Upload de Dados")
    uploaded_file = st.sidebar.file_uploader(
        "Escolha o arquivo CSV da pesquisa:",
        type=['csv'],
        help="Fa√ßa upload do arquivo CSV com os dados da pesquisa de satisfa√ß√£o"
    )
    
    if uploaded_file is not None:
        try:
            # Carrega os dados
            df = pd.read_csv(uploaded_file)
            
            # Inicializa o analisador
            analyzer = INJuniorSurveyAnalyzer(df)
            
            # Gera o relat√≥rio
            report = analyzer.generate_summary_report()
            
            # Exibe cards com m√©tricas principais
            st.subheader("üìà Vis√£o Geral")
            display_metrics_cards(report)
            
            # Tabs para diferentes an√°lises
            tab1, tab2, tab3, tab4, tab5 = st.tabs([
                "üòä Satisfa√ß√£o",
                "‚è∞ Carga de Trabalho",
                "üè¢ Estrutura Organizacional",
                "üí¨ Cultura de Feedback",
                "üìä Dados Detalhados"
            ])
            
            with tab1:
                st.subheader("An√°lise de Satisfa√ß√£o")
                create_satisfaction_charts(analyzer)
                
                if 'satisfacao_geral' in report['satisfacao']:
                    sat = report['satisfacao']['satisfacao_geral']
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.info(f"**M√©dia:** {sat['media']}/5")
                    with col2:
                        st.info(f"**Mediana:** {sat['mediana']}/5")
                    with col3:
                        st.info(f"**Desvio Padr√£o:** {sat['desvio_padrao']}")
            
            with tab2:
                st.subheader("An√°lise de Carga de Trabalho")
                create_workload_charts(analyzer)
                
                # Tabela resumo
                if report['carga_trabalho']:
                    st.subheader("Resumo da Carga de Trabalho")
                    workload_summary = []
                    for key, data in report['carga_trabalho'].items():
                        workload_summary.append({
                            'M√©trica': key.replace('_', ' ').title(),
                            'M√©dia': data['media'],
                            'Mediana': data['mediana'],
                            'M√°ximo': data['maximo'],
                            'N¬∞ Respostas': data['n_respostas']
                        })
                    
                    if workload_summary:
                        st.dataframe(pd.DataFrame(workload_summary), use_container_width=True)
            
            with tab3:
                st.subheader("Estrutura Organizacional")
                create_organizational_charts(analyzer)
            
            with tab4:
                st.subheader("Cultura de Feedback")
                create_feedback_charts(analyzer)
            
            with tab5:
                st.subheader("Dados Detalhados")
                
                # Op√ß√µes de visualiza√ß√£o
                view_option = st.radio(
                    "Escolha o que visualizar:",
                    ["Dados Processados", "Estat√≠sticas Resumidas", "Dados Originais"]
                )
                
                if view_option == "Dados Processados":
                    st.dataframe(analyzer.df_processed, use_container_width=True)
                
                elif view_option == "Estat√≠sticas Resumidas":
                    numeric_cols = analyzer.df_processed.select_dtypes(include=[np.number]).columns
                    if len(numeric_cols) > 0:
                        st.dataframe(analyzer.df_processed[numeric_cols].describe(), use_container_width=True)
                    else:
                        st.warning("Nenhuma coluna num√©rica encontrada para estat√≠sticas.")
                
                else:  # Dados Originais
                    st.dataframe(df, use_container_width=True)
                
                # Download dos dados processados
                csv = analyzer.df_processed.to_csv(index=False)
                st.download_button(
                    label="üì• Download dos Dados Processados",
                    data=csv,
                    file_name="dados_processados_in_junior.csv",
                    mime="text/csv"
                )
        
        except Exception as e:
            st.error(f"Erro ao processar o arquivo: {str(e)}")
            st.info("Verifique se o arquivo CSV est√° no formato correto.")
    
    else:
        st.info("üëÜ Por favor, fa√ßa upload do arquivo CSV na barra lateral para come√ßar a an√°lise.")
        
        # Instru√ß√µes
        with st.expander("‚ÑπÔ∏è Instru√ß√µes de Uso"):
            st.markdown("""
            ### Como usar este dashboard:
            
            1. **Upload do Arquivo**: Use a barra lateral para fazer upload do arquivo CSV da pesquisa
            2. **Visualiza√ß√£o Autom√°tica**: O dashboard processar√° os dados automaticamente
            3. **Navega√ß√£o por Abas**: Use as abas para explorar diferentes aspectos da an√°lise
            4. **M√©tricas Interativas**: Todos os gr√°ficos s√£o interativos - voc√™ pode fazer zoom, filtrar, etc.
            
            ### Funcionalidades:
            - ‚úÖ An√°lise autom√°tica de dados ausentes
            - ‚úÖ C√°lculo de m√©tricas estat√≠sticas profissionais
            - ‚úÖ Visualiza√ß√µes interativas
            - ‚úÖ Download dos dados processados
            - ‚úÖ Interface responsiva
            """)

if __name__ == "__main__":
    main()